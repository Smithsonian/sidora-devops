#!/bin/sh
#
#
#
#   Startup/shutdown script for running islandora microservices.
#
#   Linux chkconfig stuff:
#
#   chkconfig: 345 90 10
#   description: Startup/shutdown script for running Islandora Microservices.
#
# Source function library.
. /etc/rc.d/init.d/functions

PROG="Islandora Microservices"
PYTHON=python2.6
MICROSERVICES_PATH=/opt/islandora_microservices/
CONFIG_FILE=islandora_listener.cfg
PLUGIN_DIR=plugins
PID_SEARCH=$(ps auxww |grep 'python.*islandora_listener.*islandora_listener.cfg' |grep -v grep |awk '{print $2}')
TMOUT=30

# *** Please make sure you change the fedora user to reflect the local setup. ***
FEDORA_USER=fedora

# 20140605 jwb - is there a reason to require a _minimum_ 2GiB stack/heap size? I.e. why allocate 2GiB at instantiation?
#export JAVA_OPTS="-Xms2048m -Xmx8192m -XX:MaxPermSize=512m -Djavax.net.ssl.trustStore=/usr/local/fedora/server/truststore -Djavax.net.ssl.trustStorePassword=tomcat"
export JAVA_OPTS="-Xmx8192m -XX:MaxPermSize=512m -Djavax.net.ssl.trustStore=/usr/local/fedora/server/truststore -Djavax.net.ssl.trustStorePassword=tomcat"

start () {
	echo -n "Starting $PROG: "
	# check to see if the process is already running
	if [ $PID_SEARCH ]; then
	    echo "$PROG is already running"
	else
	    cd $MICROSERVICES_PATH
	    let CTR=0
	    while [ $CTR -lt $TMOUT ]; do
		image_check=$(curl -s --connect-timeout 1 --max-time 2 -o /dev/null -w "%{http_code}" "http://localhost:8080/tomcat.gif")
		case $image_check in 
		    20*)
			let CTR=999
			;;
		    *)
			[ $CTR -eq 0 ] && printf " waiting for fedora: "
			sleep 1  #give it a little bit longer for fedora to start
			let CTR+=1
			;;
		esac
	    done
	    su $FEDORA_USER bash -c "env HOME=/home/$FEDORA_USER $PYTHON ${MICROSERVICES_PATH}islandora_listener.py -C $CONFIG_FILE -P $PLUGIN_DIR &> /dev/null &"
	    sleep 5  #waiting here just in case fedora wasn't running and uSVCS quits

	    PID_SEARCH=$(ps auxww |grep 'python.*islandora_listener.*islandora_listener.cfg' |grep -v grep| awk '{print $2}')
	    if [ $PID_SEARCH ]; then
		touch /var/lock/islandora_microservices
		echo_success ; printf "\n"
		RETVAL=0
	    else
		echo_failure ; printf "\n"
		RETVAL=1
	    fi
	fi
}

stop () {
	echo -n "Stopping $PROG: "

	if [ ! -f /var/lock/islandora_microservices ]; then
		echo "$PROG is not running"
	else
	    pkill -f 'python.*islandora_listener'
	    let CTR=0
	    while [ $CTR -lt $TMOUT ]; do
		PID_SEARCH=$(ps auxww |grep 'python.*islandora_listener.*islandora_listener.cfg' |grep -v grep| awk '{print $2}')
                [ -z "$PID_SEARCH" ] && break
		let CTR+=1
		sleep 1
	    done

	    if [ $PID_SEARCH ]; then
		echo_failure ; printf "\n"
		RETVAL=1
	    else
		rm -f /var/lock/islandora_microservices
		echo_success ; printf "\n"
		RETVAL=0
	    fi
	fi
}

case $1 in
    start)
	start
	;;
    stop)
	stop
	;;
    restart)
	stop
	start
	;;
    status)
	if [ -f /var/lock/islandora_microservices ]; then
	    if [ -z "$PID_SEARCH" ] ; then
		echo "Stale lock file exists. No pid found for Islandora Microservices. $PROG is not running."
	    else
		echo "$PROG (pid $PID_SEARCH) is running..."
	    fi
	else
	    echo "$PROG has not been started."
	   fi
	;;
    *)
	echo "Usage: $PROG {start|stop|restart|status}"
	exit 3
	;;
esac

exit $RETVAL
